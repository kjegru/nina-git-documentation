{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to NINA's Git Documentation Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to NINA's Git Documentation"},{"location":"#welcome-to-ninas-git-documentation","text":"","title":"Welcome to NINA's Git Documentation"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"git-workflow-guide/","text":"Git Workflow Guide This document outlines the branching strategy and workflow used in this project to ensure stability, efficient development, and smooth deployment to production and testing environments. Branch Overview production : Protected production branch that deploys directly to production servers. Only accepts PRs from main . main : Protected source of truth, representing the latest stable and approved state of the project. test : Protected integration testing branch that deploys to test servers. dev : Development branches for individual features ( feat/ ) or patches ( fix/ ). Branching Strategy 1. production Branch Purpose : Production-ready code only Protection : Requires PR and approvals from main Deploys : Automatically to production servers Rules : No direct commits, PR only 2. main Branch Purpose : Source of truth for stable code Protection : Requires PR and approvals Updates : Accepts PRs from test after successful testing Rules : No direct commits, PR only 3. test Branch Purpose : Integration testing environment Protection : Requires PR from feature/fix branches Deploys : Automatically to test servers Rules : PR required, automated tests must pass 4. Feature and Fix Branches Purpose : Individual development work Naming : Features: feat/feature-name Fixes: fix/issue-name Source : Always branch from test Merge : Back to test via PR Workflow Steps 1. Starting New Work # Update test branch git checkout test git pull origin test # Create new feature branch git checkout -b feat/feature-name # or for fixes git checkout -b fix/issue-name 2. Development Process # Regular commits to your branch git add . git commit -m \"feat: descriptive message\" # Keep branch updated with test git checkout test git pull origin test git checkout feat/feature-name git rebase test 3. Creating Pull Requests Feature \u2192 Test Create PR from your feature branch to test Ensure all tests pass Get code review approval Merge using rebase strategy Test \u2192 Main After testing in test environment Create PR from test to main Requires additional review Merge using rebase strategy Main \u2192 Production Create PR from main to production Final review and approval Merge using rebase strategy Best Practices Commit Messages Use conventional commits format: feat: add new feature fix: resolve issue docs: update documentation refactor: improve code structure Branch Management Keep branches short-lived Delete branches after merging Regularly rebase with test Code Review Required for all PRs Check for: Code quality Test coverage Documentation updates Security considerations Deployment Verification Verify deployments in test environment Run full test suite before production merge Monitor deployments for issues Common Commands # Create new feature branch git checkout -b feat/feature-name # Update branch with latest test changes git checkout test git pull origin test git checkout feat/feature-name git rebase test # Force push after rebase (if needed) git push origin feat/feature-name --force-with-lease # Delete local branch after merge git branch -d feat/feature-name # Delete remote branch git push origin --delete feat/feature-name","title":"Git Workflow Guide"},{"location":"git-workflow-guide/#git-workflow-guide","text":"This document outlines the branching strategy and workflow used in this project to ensure stability, efficient development, and smooth deployment to production and testing environments.","title":"Git Workflow Guide"},{"location":"git-workflow-guide/#branch-overview","text":"production : Protected production branch that deploys directly to production servers. Only accepts PRs from main . main : Protected source of truth, representing the latest stable and approved state of the project. test : Protected integration testing branch that deploys to test servers. dev : Development branches for individual features ( feat/ ) or patches ( fix/ ).","title":"Branch Overview"},{"location":"git-workflow-guide/#branching-strategy","text":"","title":"Branching Strategy"},{"location":"git-workflow-guide/#1-production-branch","text":"Purpose : Production-ready code only Protection : Requires PR and approvals from main Deploys : Automatically to production servers Rules : No direct commits, PR only","title":"1. production Branch"},{"location":"git-workflow-guide/#2-main-branch","text":"Purpose : Source of truth for stable code Protection : Requires PR and approvals Updates : Accepts PRs from test after successful testing Rules : No direct commits, PR only","title":"2. main Branch"},{"location":"git-workflow-guide/#3-test-branch","text":"Purpose : Integration testing environment Protection : Requires PR from feature/fix branches Deploys : Automatically to test servers Rules : PR required, automated tests must pass","title":"3. test Branch"},{"location":"git-workflow-guide/#4-feature-and-fix-branches","text":"Purpose : Individual development work Naming : Features: feat/feature-name Fixes: fix/issue-name Source : Always branch from test Merge : Back to test via PR","title":"4. Feature and Fix Branches"},{"location":"git-workflow-guide/#workflow-steps","text":"","title":"Workflow Steps"},{"location":"git-workflow-guide/#1-starting-new-work","text":"# Update test branch git checkout test git pull origin test # Create new feature branch git checkout -b feat/feature-name # or for fixes git checkout -b fix/issue-name","title":"1. Starting New Work"},{"location":"git-workflow-guide/#2-development-process","text":"# Regular commits to your branch git add . git commit -m \"feat: descriptive message\" # Keep branch updated with test git checkout test git pull origin test git checkout feat/feature-name git rebase test","title":"2. Development Process"},{"location":"git-workflow-guide/#3-creating-pull-requests","text":"Feature \u2192 Test Create PR from your feature branch to test Ensure all tests pass Get code review approval Merge using rebase strategy Test \u2192 Main After testing in test environment Create PR from test to main Requires additional review Merge using rebase strategy Main \u2192 Production Create PR from main to production Final review and approval Merge using rebase strategy","title":"3. Creating Pull Requests"},{"location":"git-workflow-guide/#best-practices","text":"Commit Messages Use conventional commits format: feat: add new feature fix: resolve issue docs: update documentation refactor: improve code structure Branch Management Keep branches short-lived Delete branches after merging Regularly rebase with test Code Review Required for all PRs Check for: Code quality Test coverage Documentation updates Security considerations Deployment Verification Verify deployments in test environment Run full test suite before production merge Monitor deployments for issues","title":"Best Practices"},{"location":"git-workflow-guide/#common-commands","text":"# Create new feature branch git checkout -b feat/feature-name # Update branch with latest test changes git checkout test git pull origin test git checkout feat/feature-name git rebase test # Force push after rebase (if needed) git push origin feat/feature-name --force-with-lease # Delete local branch after merge git branch -d feat/feature-name # Delete remote branch git push origin --delete feat/feature-name","title":"Common Commands"}]}